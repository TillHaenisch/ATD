#!/usr/bin/python
# -*- coding: utf-8 -*-

# defmodel.py (c) Till Haenisch till.haenisch@dhbw-heidenheim.de, Stephan Rogge stephan.rogge@certerius.com
# Our default attack tree. For details about modeling see Node.py
# Riskmanagement veraendert TILL 13.5.2019

from Node import Node,get_all_nodes

D1020202 = Node('Firewall rule deny access to target', difficulty=2, capability=2, type='measure')
D1020201 = Node('L2 Segmentation', difficulty=3, capability=3, type='measure')
D102020302 = Node('endpoint authentication via certificates', difficulty=6, capability=5, type='measure')
D102020301 = Node('End-to-End encryption', difficulty=6, capability=4, type='measure')
D1020203a = Node('Use cryptographic techniques', type='measure', children=Node.alternatives([D102020301, D102020302]))
A1020203 = Node('MitM redirected router traffic', difficulty=4, capability=5, children=[D1020203a])
A1020202 = Node('L3 routing', difficulty=2, capability=2, children=[D1020202])
A1020201 = Node('L2 switching', difficulty=3, capability=4, children=[D1020201])
A10202 = Node('network connectivity to target', children=Node.alternatives([A1020201, A1020202, A1020203]))
# Achtung, das ist ein anderer Zweig unter indirect, den wir noch nciht mit WKs
# versehen hatten. Ich hab einfach mal teilweise die Werte von "direct" uebernommen
D102010101 = Node('uninstall noessential application', type="measure", difficulty=1, capability=2)
A102010101 = Node('guess application (e.g. Acrobat between 10.0 and 8.0) ', difficulty=1, capability=5)
A102010102 = Node('guess OS (e.g. Windows 7 Sp0)', difficulty=1, capability=3)
A1020101 = Node('guess vulnerability', children=Node.alternatives([A102010101, A102010102]))
D102010201 = Node('disable USB ports', type="measure", difficulty=1, capability=3)
D102010202 = Node('remove Device', type="measure", difficulty=1, capability=4)
A102010201 = Node('USB available', children=[D102010201], difficulty=1, capability=1)
A102010202 = Node('CDRom available', children=[D102010202], difficulty=1, capability=2)
A1020102 = Node('medium', children=Node.alternatives([A102010201, A102010202]))
D102010301 = Node('anti-malware-application', type="measure", capability=2, difficulty=2)
D102010302 = Node('Digital Forensic', type='measure', difficulty=4, capability=6)
A102010302 = Node('rare component', children=[D102010302], difficulty=5, capability=6)
A102010301 = Node('known component', children=[D102010301], difficulty=2, capability=2)
A1020103 = Node('select malware', children=[A102010301, A102010302])
D102040102 = Node('Firewall rule Deny any from outside', difficulty=1, capability=2, type='measure')
D102040101 = Node('periodic port scan (as part of a SIEM)', difficulty=3, capability=4, type="measure")
A102040102 = Node('Route form Internet Gateway to target', difficulty=4, capability=5, children=[D102040102])
A102040101 = Node('Listing Service above 1024', difficulty=2, capability=4, children=[D102040101])
D102040202 = Node('Firewall L7 inspect communiction', difficulty=4, capability=5, type='measure')
D102040201 = Node('Firewall L3_4 deny rule port above 1024', difficulty=2, capability=2, type='measure')
A102040202 = Node('Choose wellknown Port (e.g. 80) as Dst', difficulty=1, capability=1, children=[D102040202])
A102040201 = Node('Choose Port above 1024 as Dst', difficulty=1, capability=1, children=[D102040201])
A1020402 = Node('to outside', children=Node.alternatives([A102040201, A102040202]))
A1020401 = Node('from outside', children=Node.composition([A102040101, A102040102]))
A10204 = Node('established connection', children=Node.alternatives([A1020401, A1020402]))
A10201 = Node('alteranative System as proxy(e.g Office PC)', children=Node.composition([A1020101, A1020102, A1020103, A10204]))
A102 = Node('indirect way', children=Node.composition([A10201, A10202]))
D1010202 = Node('uninstall noessential application', type="measure", difficulty=1, capability=2)
A1010202 = Node('guess application (e.g. Acrobat older than 7.0)', difficulty=1, capability=5, children=[D1010202])
A1010201 = Node('guess OS (e.g. Windows 2000)', difficulty=1, capability=3)
D1010102 = Node('disable USB ports', type="measure", difficulty=1, capability=3)
D1010101 = Node('remove Device', type="measure", difficulty=1, capability=4)
A1010102 = Node('USB available', difficulty=1, capability=1, children=[D1010102])
A1010101 = Node('CDRom available', difficulty=1, capability=2, children=[D1010101])
D101030103 = Node('registered USB memory', type="measure", capability=5, difficulty=3, children=[])
D101030102 = Node('olny own USB-memory', type="measure", capability=5, difficulty=2, children=[])
D101030101 = Node('scann CDRom and allow', type="measure", difficulty=1, capability=4)
D1010301 = Node('Malware-Detection-Station', type="measure", children=Node.alternatives([D101030101]+Node.composition([D101030102, D101030103])))
D1010302 = Node('Digital Forensic', type='measure', difficulty=4, capability=6)
A1010302 = Node('rare component', difficulty=5, capability=6, children=[D1010302])
A1010301 = Node('known component', difficulty=2, capability=2, children=[D1010301])
D101040102 = Node('Firewall rule Deny any from outside', type='measure', difficulty=3, capability=2)
D101040101 = Node('periodic port scan (as part of a SIEM)', type="measure", difficulty=2, capability=3)
A101040102 = Node('Route form Internet Gateway to target', difficulty=5, capability=3, children=[D101040102])
A101040101 = Node('Listing Service above 1024', difficulty=5, capability=4, children=[D101040101])
D101040203 = Node('no default gw configured', difficulty=2, capability=1, type='measure')
D101040202 = Node('Firewall L7 inspect communiction', difficulty=4, capability=5, type='measure')
D101040201 = Node('Firewall L3_4 deny rule port  above 1024', difficulty=2, capability=2, type='measure')
A101040203 = Node('Route to Internet', difficulty=3, capability=1, children=[D101040203])
A101040202 = Node('Choose wellknown Port (e.g. 80) as Dst', difficulty=1, capability=1, children=[D101040202])
A101040201 = Node('Choose Port above 1024 as Dst', difficulty=1, capability=1, children=[D101040201])
A1010402 = Node('to outside', children=Node.composition(Node.alternatives([A101040201, A101040202])+[A101040203]))
A1010401 = Node('from outside', children=Node.composition([A101040101, A101040102]))
A10104 = Node('established connection', children=Node.alternatives([A1010401, A1010402]))
A10103 = Node('select malware', children=Node.alternatives([A1010301, A1010302]))
A10102 = Node('guess vulnerability', children=Node.alternatives([A1010201, A1010202]))
A10101 = Node('select medium', children=Node.alternatives([A1010101, A1010102]))
A101 = Node('direct on Target', children=Node.composition([A10101, A10102, A10103, A10104]))
A1 = Node('on-site Attack', children=Node.alternatives([A101, A102]))

D2020402 = Node('Firewall rule deny access to target', difficulty=3, capability=4, type='measure')
D2020401 = Node('L2 Segmentation', difficulty=2, capability=2, type='measure')
D202040302 = Node('endpoint authentication via certificates', difficulty=5, capability=5, type='measure')
D202040301 = Node('End-to-End encryption', difficulty=3, capability=3, type='measure')
D2020403a = Node('Use cryptographic techniques', type='measure', children=Node.alternatives([D202040301, D202040302]))
A2020403 = Node('MitM redirected router traffic', difficulty=4, capability=4, children=[D2020403a])
A2020402 = Node('L3 routing', difficulty=3, capability=4, children=[D2020402])
A2020401 = Node('L2 switching', difficulty=4, capability=6, children=[D2020401])
D202040102 = Node('placed in Production-IT segment', difficulty=2, capability=5, type='measure')
D202040101 = Node('placed in Office-IT segment', difficulty=2, capability=5, type='measure')
D20204 = Node('HoneyPot', type='measure', children=Node.alternatives([D202040101, D202040102]))
A20204 = Node('4. search network connectivity to target', children=Node.alternatives([A2020401, A2020402, A2020403])+[D20204])
D20203 = Node('Digital Forensic', type='measure', difficulty=6, capability=5)
A20203 = Node('3. place malicious firmware', difficulty=5, capability=5, children=[D20203])
D20202 = Node('IDS (as part of SIEM)', type='measure', difficulty=5, capability=5)
A20202 = Node('2. poison DNS cache from target side', difficulty=5, capability=5, children=[D20202])
D2020102 = Node('risk of unpatched system', difficulty=5, capability=5, type='measure')
D2020101 = Node('risk of autoupdate', difficulty=5, capability=5, type='measure')
D20201 = Node('Riskmanagement', type='measure', children=Node.alternatives([D2020101, D2020102]))
A20201 = Node('1. Identify IoT with autoupdate from Internet', difficulty=4, capability=4, children=[D20201])
A202 = Node('1st Target IoT', children=Node.sequence([A20201, A20202, A20203, A20204]))
D2010302 = Node('Firewall rule deny access to target', difficulty=4, capability=4, type='measure')
D2010301 = Node('L2 Segmentation', difficulty=2, capability=2, type='measure')
D201030302 = Node('endpoint authentication via certificates', difficulty=5, capability=6, type='measure')
D201030301 = Node('End-to-End encryption', difficulty=4, capability=6, type='measure')
D2010303a = Node('Use cryptographic techniques', type='measure', children=Node.alternatives([D201030301, D201030302]))
A2010303 = Node('MitM redirected router traffic', difficulty=4, capability=4, children=[D2010303a])
A2010302 = Node('L3 routing', difficulty=3, capability=4, children=[D2010302])
A2010301 = Node('L2 switching', difficulty=4, capability=6, children=[D2010301])
D201030102 = Node('placed in Production-IT segment', difficulty=2, capability=5, type='measure')
D201030101 = Node('placed in Office-IT segment', difficulty=2, capability=5, type='measure')
D20103 = Node('HoneyPot', type='measure', children=Node.alternatives([D201030101, D201030102]))
A20103 = Node('3. search network connectivity to target', children=Node.alternatives([A2010301, A2010302, A2010303])+[D20103])
A201020302 = Node('guess application (e.g. Browser Edge)', difficulty=2, capability=2)
A201020301 = Node('guess OS (e.g. Windows 10', difficulty=3, capability=3)
A2010203 = Node('guess vulnerability', children=Node.alternatives([A201020301, A201020302]))
D201020201 = Node('Malware-Detection', difficulty=2, capability=2, type="measure")
D201020202 = Node('Digital Forensic', difficulty=4, capability=6, type='measure')
A201020202 = Node('rare component', difficulty=5, capability=6, children=[D201020202])
A201020201 = Node('known component', difficulty=2, capability=2, children=[D201020201])
A2010202 = Node('select Malware', children=([A201020201, A201020202]))
D201020101 = Node('Firewall NextGen L7 detect ability XSS', difficulty=4, capability=5, type='measure')
A201020102 = Node('place Malware directly', difficulty=4, capability=3)
A201020101 = Node('place Malware via cross-site-script', difficulty=4, capability=4, children=[D201020101])
A2010201 = Node('a webside known and trusted by target person (e.g. Forum)', difficulty=5, capability=4)
A20102 = Node('2. place Drive by Malware', children=Node.composition([A2010201]+Node.alternatives([A201020101, A201020102])+[A2010202]+[A2010203]))
D2010103 = Node('employee awareness', difficulty=3, capability=3, type="measure")
D2010102 = Node('Spamfilter', difficulty=4, capability=2, type='measure')
D2010101 = Node('Social Media policy', difficulty=5, capability=5, type='measure')
A2010103 = Node('Person use link', difficulty=4, capability=1, children=[D2010103])
A2010102 = Node('send a spearphishing email', difficulty=1, capability=2, children=[D2010102])
A2010101 = Node('identify Person with access to target', difficulty=3, capability=3, children=[D2010101])
A20101 = Node('1. Spear phishing Office-IT', children=Node.composition([A2010101, A2010102, A2010103]))
A201 = Node('1st Target Human', children=Node.sequence([A20101, A20102, A20103]))
A2 = Node('remote Attack', children=Node.alternatives([A201, A202]))




tree = Node('Wen Interface Control System', children=Node.alternatives([A1, A2]))



